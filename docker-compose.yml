# Docker Compose 配置
# AI行銷內容生成系統 - 完整版部署

services:
  # 主應用服務
  marketing-ai:
    build: .
    container_name: marketing-ai-app
    ports:
      - "7860:7860"  # Gradio Web界面
      - "8000:8000"  # FastAPI服務
    volumes:
      - ./outputs:/app/outputs
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - DATABASE_URL=postgresql://marketing_user:marketing_pass@postgres:5432/marketing_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - API_SECRET_KEY=${API_SECRET_KEY}
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - marketing-ai-network

  # PostgreSQL資料庫
  postgres:
    image: postgres:15
    container_name: marketing-ai-db
    environment:
      - POSTGRES_DB=marketing_ai
      - POSTGRES_USER=marketing_user
      - POSTGRES_PASSWORD=marketing_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - marketing-ai-network

  # Redis快取服務
  redis:
    image: redis:7-alpine
    container_name: marketing-ai-redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - marketing-ai-network

  # Celery Worker
  celery-worker:
    build: .
    container_name: marketing-ai-worker
    command: celery -A marketing_content_generator.api_server_full worker --loglevel=info --concurrency=2
    volumes:
      - ./outputs:/app/outputs
      - ./checkpoints:/app/checkpoints
      - ./logs:/app/logs
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - DATABASE_URL=postgresql://marketing_user:marketing_pass@postgres:5432/marketing_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    networks:
      - marketing-ai-network

  # Celery Beat (排程任務)
  celery-beat:
    build: .
    container_name: marketing-ai-beat
    command: celery -A marketing_content_generator.api_server_full beat --loglevel=info
    volumes:
      - ./logs:/app/logs
    environment:
      - DATABASE_URL=postgresql://marketing_user:marketing_pass@postgres:5432/marketing_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - marketing-ai-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: marketing-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - marketing-ai
    restart: unless-stopped
    networks:
      - marketing-ai-network

  # 監控服務 - Prometheus
  prometheus:
    image: prom/prometheus
    container_name: marketing-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - marketing-ai-network

  # 監控服務 - Grafana
  grafana:
    image: grafana/grafana
    container_name: marketing-ai-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    restart: unless-stopped
    networks:
      - marketing-ai-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  marketing-ai-network:
    driver: bridge